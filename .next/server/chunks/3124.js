"use strict";exports.id=3124,exports.ids=[3124],exports.modules={1611:(e,r,t)=>{t.d(r,{Z:()=>l});var a=t(12125);/**
 * @license lucide-react v0.454.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */let l=(0,a.Z)("Ellipsis",[["circle",{cx:"12",cy:"12",r:"1",key:"41hilf"}],["circle",{cx:"19",cy:"12",r:"1",key:"1wjl8i"}],["circle",{cx:"5",cy:"12",r:"1",key:"1pcz8c"}]])},36392:(e,r,t)=>{t.d(r,{$j:()=>z,Dx:()=>E,VY:()=>$,aU:()=>C,aV:()=>V,dk:()=>F,fC:()=>P,h_:()=>O,xz:()=>k});var a=t(9885),l=t(8718),i=t(80880),o=t(7589),s=t(32840),n=t(71085),d=t(30784),c="AlertDialog",[u,p]=(0,l.b)(c,[o.p8]),f=(0,o.p8)(),AlertDialog=e=>{let{__scopeAlertDialog:r,...t}=e,a=f(r);return(0,d.jsx)(o.fC,{...a,...t,modal:!0})};AlertDialog.displayName=c;var g=a.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...a}=e,l=f(t);return(0,d.jsx)(o.xz,{...l,...a,ref:r})});g.displayName="AlertDialogTrigger";var AlertDialogPortal=e=>{let{__scopeAlertDialog:r,...t}=e,a=f(r);return(0,d.jsx)(o.h_,{...a,...t})};AlertDialogPortal.displayName="AlertDialogPortal";var x=a.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...a}=e,l=f(t);return(0,d.jsx)(o.aV,{...l,...a,ref:r})});x.displayName="AlertDialogOverlay";var y="AlertDialogContent",[m,v]=u(y),D=a.forwardRef((e,r)=>{let{__scopeAlertDialog:t,children:l,...c}=e,u=f(t),p=a.useRef(null),g=(0,i.e)(r,p),x=a.useRef(null);return(0,d.jsx)(o.jm,{contentName:y,titleName:A,docsSlug:"alert-dialog",children:(0,d.jsx)(m,{scope:t,cancelRef:x,children:(0,d.jsxs)(o.VY,{role:"alertdialog",...u,...c,ref:g,onOpenAutoFocus:(0,s.M)(c.onOpenAutoFocus,e=>{e.preventDefault(),x.current?.focus({preventScroll:!0})}),onPointerDownOutside:e=>e.preventDefault(),onInteractOutside:e=>e.preventDefault(),children:[(0,d.jsx)(n.A4,{children:l}),(0,d.jsx)(DescriptionWarning,{contentRef:p})]})})})});D.displayName=y;var A="AlertDialogTitle",h=a.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...a}=e,l=f(t);return(0,d.jsx)(o.Dx,{...l,...a,ref:r})});h.displayName=A;var j="AlertDialogDescription",b=a.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...a}=e,l=f(t);return(0,d.jsx)(o.dk,{...l,...a,ref:r})});b.displayName=j;var w=a.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...a}=e,l=f(t);return(0,d.jsx)(o.x8,{...l,...a,ref:r})});w.displayName="AlertDialogAction";var N="AlertDialogCancel",R=a.forwardRef((e,r)=>{let{__scopeAlertDialog:t,...a}=e,{cancelRef:l}=v(N,t),s=f(t),n=(0,i.e)(r,l);return(0,d.jsx)(o.x8,{...s,...a,ref:n})});R.displayName=N;var DescriptionWarning=({contentRef:e})=>{let r=`\`${y}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${y}\` by passing a \`${j}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${y}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return a.useEffect(()=>{let t=document.getElementById(e.current?.getAttribute("aria-describedby"));t||console.warn(r)},[r,e]),null},P=AlertDialog,k=g,O=AlertDialogPortal,V=x,$=D,C=w,z=R,E=h,F=b},43618:(e,r,t)=>{t.d(r,{f:()=>s});var a=t(9885),l=t(43979),i=t(30784),o=a.forwardRef((e,r)=>(0,i.jsx)(l.WV.label,{...e,ref:r,onMouseDown:r=>{let t=r.target;t.closest("button, input, select, textarea")||(e.onMouseDown?.(r),!r.defaultPrevented&&r.detail>1&&r.preventDefault())}}));o.displayName="Label";var s=o}};